---------------------------------------------------------------------------
--
-- IntSet.sql-
--    This file shows how to create a new user-defined type and how to
--    use this new type.
--
--
-- Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
-- Portions Copyright (c) 1994, Regents of the University of California
--
-- src/tutorial/IntSet.source
--
---------------------------------------------------------------------------

-----------------------------
-- Creating a new type:
--	We are going to create a new type called 'IntSet' which represents
--	IntSet numbers.
--	A user-defined type must have an input and an output function, and
--	optionally can have binary input and output functions.  All of these
--	are usually user-defined C functions.
-----------------------------

-- Assume the user defined functions are in _OBJWD_/IntSet$DLSUFFIX
-- (we do not want to assume this is in the dynamic loader search path).
-- Look at $PWD/IntSet.c for the source.  Note that we declare all of
-- them as STRICT, so we do not need to cope with NULL inputs in the
-- C code.  We also mark them IMMUTABLE, since they always return the
-- same outputs given the same inputs.

-- the input function 'IntSet_in' takes a null-terminated string (the
-- textual representation of the type) and turns it into the internal
-- (in memory) representation. You will get a message telling you 'IntSet'
-- does not exist yet but that's okay.

CREATE FUNCTION IntSet_in(cstring)
   RETURNS IntSet
   AS '_OBJWD_/IntSet'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'IntSet_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION IntSet_out(IntSet)
   RETURNS cstring
   AS '_OBJWD_/IntSet'
   LANGUAGE C IMMUTABLE STRICT;

-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).

CREATE TYPE IntSet (
   internallength = 16, -- 需要声明 how long the new type is in your case. 在ass中，是变长不是定长，因此不用声明这个属性
   input = IntSet_in,
   output = IntSet_out,
   receive = IntSet_recv, -- Ass中不需要
   send = IntSet_send, -- Ass中不需要
   -- alignment = double -- If your internal representaion is a character string, then you can have byte alignment. If it's an array of int values, then your alignment would have to be integer
   alignment = int4 -- only if your internal representation in int[]
);


-----------------------------
-- Using the new type:
--	user-defined types can be used like ordinary built-in types.
-----------------------------

-- eg. we can use it in a table --一个例子如何使用the data type

CREATE TABLE test_IntSet (
	a	IntSet,
	b	IntSet
);

-- data for user-defined types are just strings in the proper textual
-- representation.

INSERT INTO test_IntSet VALUES ('(1.0, 2.5)', '(4.2, 3.55 )');
INSERT INTO test_IntSet VALUES ('(33.0, 51.4)', '(100.42, 93.55)');

SELECT * FROM test_IntSet;

-----------------------------
-- Creating an operator for the new type:
--	Let's define an add operator for IntSet types. Since POSTGRES
--	supports function overloading, we'll use + as the add operator.
--	(Operator names can be reused with different numbers and types of
--	arguments.)
-----------------------------

-- first, define a function IntSet_add (also in IntSet.c)
CREATE FUNCTION IntSet_add(IntSet, IntSet)
   RETURNS IntSet
   AS '_OBJWD_/IntSet'
   LANGUAGE C IMMUTABLE STRICT;

-- we can now define the operator. We show a binary operator here but you
-- can also define unary operators by omitting either of leftarg or rightarg.
CREATE OPERATOR || ( -- 老师按照ass改的这里
   leftarg = IntSet,
   rightarg = IntSet,
   procedure = IntSet_add,
   commutator = || -- 老师也不确定，他猜这里是||
);


SELECT (a + b) AS c FROM test_IntSet;

-- Occasionally, you may find it useful to cast the string to the desired
-- type explicitly. :: denotes a type cast.

SELECT  a + '(1.0,1.0)'::IntSet AS aa,
        b + '(1.0,1.0)'::IntSet AS bb
   FROM test_IntSet;


-----------------------------
-- Creating aggregate functions
--	you can also define aggregate functions. The syntax is somewhat
--	cryptic but the idea is to express the aggregate in terms of state
--	transition functions.
-----------------------------

CREATE AGGREGATE IntSet_sum (
   sfunc = IntSet_add,
   basetype = IntSet,
   stype = IntSet,
   initcond = '(0,0)'
);

SELECT IntSet_sum(a) FROM test_IntSet;


-----------------------------
-- Interfacing New Types with Indexes:
--	We cannot define a secondary index (eg. a B-tree) over the new type
--	yet. We need to create all the required operators and support
--      functions, then we can make the operator class.
-----------------------------

-- first, define the required operators
CREATE FUNCTION IntSet_abs_lt(IntSet, IntSet) RETURNS bool
   AS '_OBJWD_/IntSet' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION IntSet_abs_le(IntSet, IntSet) RETURNS bool
   AS '_OBJWD_/IntSet' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION IntSet_abs_eq(IntSet, IntSet) RETURNS bool
   AS '_OBJWD_/IntSet' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION IntSet_abs_ge(IntSet, IntSet) RETURNS bool
   AS '_OBJWD_/IntSet' LANGUAGE C IMMUTABLE STRICT;
CREATE FUNCTION IntSet_abs_gt(IntSet, IntSet) RETURNS bool
   AS '_OBJWD_/IntSet' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR < (
   leftarg = IntSet, rightarg = IntSet, procedure = IntSet_abs_lt,
   commutator = > , negator = >= ,
   restrict = scalarltsel, join = scalarltjoinsel
);
CREATE OPERATOR <= (
   leftarg = IntSet, rightarg = IntSet, procedure = IntSet_abs_le,
   commutator = >= , negator = > ,
   restrict = scalarlesel, join = scalarlejoinsel
);
CREATE OPERATOR = (
   leftarg = IntSet, rightarg = IntSet, procedure = IntSet_abs_eq,
   commutator = = ,
   -- leave out negator since we didn't create <> operator
   -- negator = <> ,
   restrict = eqsel, join = eqjoinsel
);
CREATE OPERATOR >= (
   leftarg = IntSet, rightarg = IntSet, procedure = IntSet_abs_ge,
   commutator = <= , negator = < ,
   restrict = scalargesel, join = scalargejoinsel
);
CREATE OPERATOR > (
   leftarg = IntSet, rightarg = IntSet, procedure = IntSet_abs_gt,
   commutator = < , negator = <= ,
   restrict = scalargtsel, join = scalargtjoinsel
);

-- create the support function too
CREATE FUNCTION IntSet_abs_cmp(IntSet, IntSet) RETURNS int4
   AS '_OBJWD_/IntSet' LANGUAGE C IMMUTABLE STRICT;

-- now we can make the operator class
CREATE OPERATOR CLASS IntSet_abs_ops
    DEFAULT FOR TYPE IntSet USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        FUNCTION        1       IntSet_abs_cmp(IntSet, IntSet);

-- 这个ass不需要index，因此这部分可不用
-- now, we can define a btree index on IntSet types. First, let's populate
-- the table. Note that postgres needs many more tuples to start using the
-- btree index during selects.
INSERT INTO test_IntSet VALUES ('(56.0,-22.5)', '(-43.2,-0.07)');
INSERT INTO test_IntSet VALUES ('(-91.9,33.6)', '(8.6,3.0)');

CREATE INDEX test_cplx_ind ON test_IntSet
   USING btree(a IntSet_abs_ops);

SELECT * from test_IntSet where a = '(56.0,-22.5)';
SELECT * from test_IntSet where a < '(56.0,-22.5)';
SELECT * from test_IntSet where a > '(56.0,-22.5)';


-- clean up the example
DROP TABLE test_IntSet; -- 这行千万要删掉，因为创建了，用这行把自定义的删掉，那自己写的那些的意义何在呢？
DROP TYPE IntSet CASCADE; -- 这行千万要删掉，因为创建了，用这行把自定义的删掉，那自己写的那些的意义何在呢？
