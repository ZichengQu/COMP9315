CREATE FUNCTION IntSet_in(cstring)
   RETURNS IntSet
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION IntSet_out(IntSet)
   RETURNS cstring
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE IntSet (
   input = IntSet_in,
   output = IntSet_out
);

----------------------------------------------------------------------------------
-- i ? S --> select -1 ? '{0,1,2,3,4,5,6,7,8,9}'::IntSet;
----------------------------------------------------------------------------------
CREATE FUNCTION contain(integer, IntSet)
  RETURNS bool
  AS '_OBJWD_/intset'
  LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR ? (
    leftarg = integer, 
    rightarg = IntSet, 
    procedure = contain
);
----------------------------------------------------------------------------------
-- # S --> select id, iset, (#iset) as card from mySets order by id;
----------------------------------------------------------------------------------
CREATE FUNCTION cardinality(IntSet)
   RETURNS integer
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR # (
    rightarg = IntSet, 
    procedure = cardinality
);
----------------------------------------------------------------------------------
-- A⊇B --> select '{0,1,2,3,4,5,6,7,8,9,10}'::IntSet >@ '{0,1,2,3,4,5,6,7,8,9}'::IntSet;
----------------------------------------------------------------------------------
CREATE FUNCTION superset(IntSet, IntSet)
  RETURNS bool
  AS '_OBJWD_/intset'
  LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR >@ (
    leftarg = IntSet, 
    rightarg = IntSet, 
    procedure = superset
);
----------------------------------------------------------------------------------
-- A⊆B --> select '{0,1,2,3,4,5,6,7,8,9,10}'::IntSet @< '{0,1,2,3,4,5,6,7,8,9}'::IntSet;
----------------------------------------------------------------------------------
CREATE FUNCTION subset (IntSet, IntSet)
  RETURNS bool
  AS '_OBJWD_/intset'
  LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR @< (
    leftarg = IntSet, 
    rightarg = IntSet, 
    procedure = subset
);
----------------------------------------------------------------------------------
-- A=B --> select '{0,1,2,3,4,5,6,7,8,9,10}'::IntSet = '{0,1,2,3,4,5,6,7,8,9}'::IntSet;
----------------------------------------------------------------------------------
CREATE FUNCTION intset_equal (IntSet, IntSet)
  RETURNS bool
  AS '_OBJWD_/intset'
  LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR = (
    leftarg = IntSet, 
    rightarg = IntSet, 
    procedure = intset_equal
);
----------------------------------------------------------------------------------
-- A<>B --> select '{0,1,2,3,4,5,6,7,8,9,10}'::IntSet <> '{0,1,2,3,4,5,6,7,8,9,11}'::IntSet;
----------------------------------------------------------------------------------
CREATE FUNCTION not_equal (IntSet, IntSet)
  RETURNS bool
  AS '_OBJWD_/intset'
  LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR <> (
    leftarg = IntSet, 
    rightarg = IntSet, 
    procedure = not_equal
);
----------------------------------------------------------------------------------
-- A && B --> select '{1,2,3,4,6,8,10}'::IntSet && '{1,3,5,7,9,10}'::IntSet;
----------------------------------------------------------------------------------
CREATE FUNCTION intersection(IntSet, IntSet)
  RETURNS IntSet
  AS '_OBJWD_/intset'
  LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR && (
    leftarg = IntSet, 
    rightarg = IntSet, 
    procedure = intersection
);
----------------------------------------------------------------------------------
-- A || B --> select '{1,2,3,4,6,8,10}'::IntSet || '{1,3,5,7,9,10}'::IntSet;
----------------------------------------------------------------------------------
CREATE FUNCTION intset_union(IntSet, IntSet)
  RETURNS IntSet
  AS '_OBJWD_/intset'
  LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR || (
    leftarg = IntSet, 
    rightarg = IntSet, 
    procedure = intset_union
);
----------------------------------------------------------------------------------
-- A !! B --> select '{1,2,3,4,5,6,7,9}'::IntSet !! '{1,3,5,7,8,9,10}'::IntSet;
----------------------------------------------------------------------------------
CREATE FUNCTION disjunction(IntSet, IntSet)
  RETURNS IntSet
  AS '_OBJWD_/intset'
  LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR !! (
    leftarg = IntSet, 
    rightarg = IntSet, 
    procedure = disjunction
);
----------------------------------------------------------------------------------
-- A - B --> select '{1,2,3,4,5,6,7,8,9}'::IntSet - '{1,3,5,7,9,11,13}'::IntSet;
----------------------------------------------------------------------------------
CREATE FUNCTION difference(IntSet, IntSet)
  RETURNS IntSet
  AS '_OBJWD_/intset'
  LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR - (
    leftarg = IntSet, 
    rightarg = IntSet, 
    procedure = difference
);

